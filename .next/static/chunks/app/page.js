/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjoaquinmetayer%2FDownloads%2Fcode%2Fjoaquinmetayer.com%2Fsrc%2Fapp%2Fhome%2Fpage.jsx&server=false!":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjoaquinmetayer%2FDownloads%2Fcode%2Fjoaquinmetayer.com%2Fsrc%2Fapp%2Fhome%2Fpage.jsx&server=false! ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/home/page.jsx */ \"(app-pages-browser)/./src/app/home/page.jsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRmpvYXF1aW5tZXRheWVyJTJGRG93bmxvYWRzJTJGY29kZSUyRmpvYXF1aW5tZXRheWVyLmNvbSUyRnNyYyUyRmFwcCUyRmhvbWUlMkZwYWdlLmpzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/OTIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9qb2FxdWlubWV0YXllci9Eb3dubG9hZHMvY29kZS9qb2FxdWlubWV0YXllci5jb20vc3JjL2FwcC9ob21lL3BhZ2UuanN4XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjoaquinmetayer%2FDownloads%2Fcode%2Fjoaquinmetayer.com%2Fsrc%2Fapp%2Fhome%2Fpage.jsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/home/styles.css":
/*!*********************************!*\
  !*** ./src/app/home/styles.css ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"ec74344009e0\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvaG9tZS9zdHlsZXMuY3NzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxjQUFjO0FBQzdCLElBQUksSUFBVSxJQUFJLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL2hvbWUvc3R5bGVzLmNzcz83MGQ1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZWM3NDM0NDAwOWUwXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/home/styles.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/home/page.jsx":
/*!*******************************!*\
  !*** ./src/app/home/page.jsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styles.css */ \"(app-pages-browser)/./src/app/home/styles.css\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nlet windowOnLoadCalled = false;\nvar anime = function() {\n    var t = {\n        linear: function(t, n, e, r) {\n            return n + t / r * e;\n        },\n        easeInQuad: function(t, n, e, r) {\n            return e * (t /= r) * t + n;\n        },\n        easeOutQuad: function(t, n, e, r) {\n            return -e * (t /= r) * (t - 2) + n;\n        },\n        easeInOutQuad: function(t, n, e, r) {\n            return (t /= r / 2) < 1 ? e / 2 * t * t + n : -e / 2 * (--t * (t - 2) - 1) + n;\n        },\n        easeInCubic: function(t, n, e, r) {\n            return e * (t /= r) * t * t + n;\n        },\n        easeOutCubic: function(t, n, e, r) {\n            return e * ((t = t / r - 1) * t * t + 1) + n;\n        },\n        easeInOutCubic: function(t, n, e, r) {\n            return (t /= r / 2) < 1 ? e / 2 * t * t * t + n : e / 2 * ((t -= 2) * t * t + 2) + n;\n        },\n        easeInQuart: function(t, n, e, r) {\n            return e * (t /= r) * t * t * t + n;\n        },\n        easeOutQuart: function(t, n, e, r) {\n            return -e * ((t = t / r - 1) * t * t * t - 1) + n;\n        },\n        easeInOutQuart: function(t, n, e, r) {\n            return (t /= r / 2) < 1 ? e / 2 * t * t * t * t + n : -e / 2 * ((t -= 2) * t * t * t - 2) + n;\n        },\n        easeInQuint: function(t, n, e, r) {\n            return e * (t /= r) * t * t * t * t + n;\n        },\n        easeOutQuint: function(t, n, e, r) {\n            return e * ((t = t / r - 1) * t * t * t * t + 1) + n;\n        },\n        easeInOutQuint: function(t, n, e, r) {\n            return (t /= r / 2) < 1 ? e / 2 * t * t * t * t * t + n : e / 2 * ((t -= 2) * t * t * t * t + 2) + n;\n        },\n        easeInSine: function(t, n, e, r) {\n            return -e * Math.cos(t / r * (Math.PI / 2)) + e + n;\n        },\n        easeOutSine: function(t, n, e, r) {\n            return e * Math.sin(t / r * (Math.PI / 2)) + n;\n        },\n        easeInOutSine: function(t, n, e, r) {\n            return -e / 2 * (Math.cos(Math.PI * t / r) - 1) + n;\n        },\n        easeInExpo: function(t, n, e, r) {\n            return 0 == t ? n : e * Math.pow(2, 10 * (t / r - 1)) + n;\n        },\n        easeOutExpo: function(t, n, e, r) {\n            return t == r ? n + e : e * (-Math.pow(2, -10 * t / r) + 1) + n;\n        },\n        easeInOutExpo: function(t, n, e, r) {\n            return 0 == t ? n : t == r ? n + e : (t /= r / 2) < 1 ? e / 2 * Math.pow(2, 10 * (t - 1)) + n : e / 2 * (-Math.pow(2, -10 * --t) + 2) + n;\n        },\n        easeInCirc: function(t, n, e, r) {\n            return -e * (Math.sqrt(1 - (t /= r) * t) - 1) + n;\n        },\n        easeOutCirc: function(t, n, e, r) {\n            return e * Math.sqrt(1 - (t = t / r - 1) * t) + n;\n        },\n        easeInOutCirc: function(t, n, e, r) {\n            return (t /= r / 2) < 1 ? -e / 2 * (Math.sqrt(1 - t * t) - 1) + n : e / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + n;\n        },\n        easeInElastic: function(t, n, e, r, a) {\n            var u = 1.70158, i = r * (1 - Math.min(a, 99) / 100), o = e;\n            if (0 == t) return n;\n            if (1 == (t /= r)) return n + e;\n            if (o < Math.abs(e)) {\n                o = e;\n                var u = i / 4;\n            } else var u = i / (2 * Math.PI) * Math.asin(e / o);\n            return -(o * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * r - u) * (2 * Math.PI) / i)) + n;\n        },\n        easeOutElastic: function(t, n, e, r, a) {\n            var u = 1.70158, i = r * (1 - Math.min(a, 999) / 1e3), o = e;\n            if (0 == t) return n;\n            if (1 == (t /= r)) return n + e;\n            if (o < Math.abs(e)) {\n                o = e;\n                var u = i / 4;\n            } else var u = i / (2 * Math.PI) * Math.asin(e / o);\n            return o * Math.pow(2, -10 * t) * Math.sin((t * r - u) * (2 * Math.PI) / i) + e + n;\n        },\n        easeInOutElastic: function(t, n, e, r, a) {\n            var u = 1.70158, i = r * (1 - Math.min(a, 99) / 100), o = e;\n            if (0 == t) return n;\n            if (2 == (t /= r / 2)) return n + e;\n            if (o < Math.abs(e)) {\n                o = e;\n                var u = i / 4;\n            } else var u = i / (2 * Math.PI) * Math.asin(e / o);\n            return 1 > t ? -0.5 * (o * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * r - u) * (2 * Math.PI) / i)) + n : o * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * r - u) * (2 * Math.PI) / i) * 0.5 + e + n;\n        },\n        easeInBack: function(t, n, e, r, a) {\n            var a = 1.70158;\n            return e * (t /= r) * t * ((a + 1) * t - a) + n;\n        },\n        easeOutBack: function(t, n, e, r, a) {\n            var a = 1.70158;\n            return e * ((t = t / r - 1) * t * ((a + 1) * t + a) + 1) + n;\n        },\n        easeInOutBack: function(t, n, e, r, a) {\n            var a = 1.70158;\n            return (t /= r / 2) < 1 ? e / 2 * (t * t * (((a *= 1.525) + 1) * t - a)) + n : e / 2 * ((t -= 2) * t * (((a *= 1.525) + 1) * t + a) + 2) + n;\n        },\n        easeInBounce: function(t, n, e, r) {\n            return e - jQuery.easing.easeOutBounce(r - t, 0, e, r) + n;\n        },\n        easeOutBounce: function(t, n, e, r) {\n            return (t /= r) < 1 / 2.75 ? e * (7.5625 * t * t) + n : 2 / 2.75 > t ? e * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + n : 2.5 / 2.75 > t ? e * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + n : e * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + n;\n        },\n        easeInOutBounce: function(n, e, r, a) {\n            return a / 2 > n ? 0.5 * t.easeInBounce(2 * n, 0, r, a) + e : 0.5 * t.easeOutBounce(2 * n - a, 0, r, a) + 0.5 * r + e;\n        }\n    }, n = {\n        duration: 1e3,\n        delay: 0,\n        loop: !1,\n        autoPlay: !0,\n        direction: \"normal\",\n        easing: \"easeInOutQuad\",\n        elasticity: 50,\n        speed: 1,\n        round: !1,\n        begin: void 0,\n        update: void 0,\n        complete: void 0\n    }, e = [\n        \"translateX\",\n        \"translateY\",\n        \"translateZ\",\n        \"rotate\",\n        \"rotateX\",\n        \"rotateY\",\n        \"rotateZ\",\n        \"scale\",\n        \"scaleX\",\n        \"scaleY\",\n        \"scaleZ\",\n        \"skewX\",\n        \"skewY\"\n    ], r = function() {\n        return {\n            array: function(t) {\n                return Array.isArray(t);\n            },\n            object: function(t) {\n                return Object.prototype.toString.call(t).indexOf(\"Object\") > -1;\n            },\n            nodeList: function(t) {\n                return t instanceof NodeList || t instanceof HTMLCollection;\n            },\n            html: function(t) {\n                return t.nodeType;\n            },\n            svg: function(t) {\n                return t instanceof SVGElement;\n            },\n            number: function(t) {\n                return !isNaN(parseInt(t));\n            },\n            string: function(t) {\n                return \"string\" == typeof t;\n            },\n            func: function(t) {\n                return \"function\" == typeof t;\n            },\n            undef: function(t) {\n                return \"undefined\" == typeof t;\n            },\n            null: function(t) {\n                return \"null\" == typeof t;\n            },\n            hex: function(t) {\n                return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);\n            },\n            rgb: function(t) {\n                return /^rgb/.test(t);\n            },\n            rgba: function(t) {\n                return /^rgba/.test(t);\n            },\n            hsl: function(t) {\n                return /^hsl/.test(t);\n            },\n            color: function(t) {\n                return r.hex(t) || r.rgb(t) || r.rgba(t) || r.hsl(t);\n            }\n        };\n    }(), a = function(t, n) {\n        return Math.floor(Math.random() * (n - t + 1)) + t;\n    }, u = function(t) {\n        return r.string(t) ? t : t + \"\";\n    }, i = function(t) {\n        return t.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n    }, o = function(t) {\n        for(var n = t.split(\" \"), e = /^[\\#\\.\\[\\]:>+~*A-Za-z][A-Za-z0-9\\-_=:>+~*$|^()\\\"\\'\\[\\]\\.]*$/, r = 0; r < n.length; r++)if (!e.test(n[r])) return !1;\n        return document.querySelectorAll(t).length ? document.querySelectorAll(t) : !1;\n    }, s = function(t) {\n        return t.reduce(function(t, n) {\n            return t.concat(r.array(n) ? s(n) : n);\n        }, []);\n    }, c = function(t) {\n        return r.array(t) ? t : (r.string(t) && (t = o(t) || t), r.nodeList(t) ? [].slice.call(t) : [\n            t\n        ]);\n    }, f = function(t, n) {\n        return t.some(function(t) {\n            return t === n;\n        });\n    }, l = function(t, n) {\n        var e = {};\n        return t.forEach(function(t) {\n            var r = JSON.stringify(n.map(function(n) {\n                return t[n];\n            }));\n            e[r] = e[r] || [], e[r].push(t);\n        }), Object.keys(e).map(function(t) {\n            return e[t];\n        });\n    }, m = function(t) {\n        var n = {};\n        for(var e in t)n[e] = t[e];\n        return n;\n    }, p = function(t, n) {\n        for(var e in n)t[e] = r.undef(t[e]) ? n[e] : t[e];\n        return t;\n    }, d = function(t) {\n        var n = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, t = t.replace(n, function(t, n, e, r) {\n            return n + n + e + e + r + r;\n        }), e = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(t), r = parseInt(e[1], 16), a = parseInt(e[2], 16), u = parseInt(e[3], 16);\n        return \"rgb(\" + r + \",\" + a + \",\" + u + \")\";\n    }, g = function(t) {\n        var n, e, r, t = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(t), a = parseInt(t[1]) / 360, u = parseInt(t[2]) / 100, i = parseInt(t[3]) / 100, o = function(t, n, e) {\n            return 0 > e && (e += 1), e > 1 && (e -= 1), 1 / 6 > e ? t + 6 * (n - t) * e : 0.5 > e ? n : 2 / 3 > e ? t + (n - t) * (2 / 3 - e) * 6 : t;\n        };\n        if (0 == u) n = e = r = i;\n        else var s = 0.5 > i ? i * (1 + u) : i + u - i * u;\n        var c = 2 * i - s;\n        return n = o(c, s, a + 1 / 3), e = o(c, s, a), r = o(c, s, a - 1 / 3), \"rgb(\" + 255 * n + \",\" + 255 * e + \",\" + 255 * r + \")\";\n    }, h = function(t) {\n        return r.rgb(t) || r.rgba(t) ? t : r.hex(t) ? d(t) : r.hsl(t) ? g(t) : void 0;\n    }, v = function(t) {\n        return /([\\+\\-]?[0-9|auto\\.]+)(%|px|pt|em|rem|in|cm|mm|ex|pc|vw|vh|deg)?/.exec(t)[2];\n    }, b = function(t, n, e) {\n        return v(n) ? n : t.indexOf(\"translate\") > -1 ? v(e) ? n + v(e) : n + \"px\" : t.indexOf(\"rotate\") > -1 || t.indexOf(\"skew\") > -1 ? n + \"deg\" : n;\n    }, M = function(t, n) {\n        return (r.html(t) || r.svg(t)) && f(e, n) ? \"transform\" : (r.html(t) || r.svg(t)) && y(t, n) ? \"css\" : (r.html(t) || r.svg(t)) && t.getAttribute(n) && !t[n] ? \"attribute\" : r[\"null\"](t[n]) || r.undef(t[n]) ? void 0 : \"object\";\n    }, y = function(t, n) {\n        return getComputedStyle(t).getPropertyValue(i(n));\n    }, I = function(t, n) {\n        var e = n.indexOf(\"scale\") > -1 ? 1 : 0, r = t.style.transform;\n        if (!r) return e;\n        for(var a = /(\\w+)\\((.+?)\\)/g, u = [], i = [], o = []; u = a.exec(r);)i.push(u[1]), o.push(u[2]);\n        var s = o.filter(function(t, e) {\n            return i[e] === n;\n        });\n        return s.length ? s[0] : e;\n    }, O = function(t, n) {\n        switch(M(t, n)){\n            case \"transform\":\n                return I(t, n);\n            case \"css\":\n                return y(t, n);\n            case \"attribute\":\n                return t.getAttribute(n);\n        }\n        return t[n] || 0;\n    }, w = function(t, n, e) {\n        if (r.color(n)) return h(n);\n        if (v(n)) return n;\n        var a = v(v(t.to) ? t.to : t.from);\n        return !a && e && (a = v(e)), a ? n + a : n;\n    }, x = function(t, n, e) {\n        return n.reduce(function(n, r, a) {\n            var r = r ? r : e[a - 1];\n            return n + t[a - 1] + r;\n        });\n    }, A = function(t) {\n        var n = /-?\\d*\\.?\\d+/g;\n        return {\n            numbers: u(t).match(n) ? u(t).match(n).map(Number) : [\n                0\n            ],\n            strings: u(t).split(n)\n        };\n    }, k = function(t) {\n        return t.map(function(t, n) {\n            return {\n                target: t,\n                id: n\n            };\n        });\n    }, E = function(t) {\n        var e = p(t, n);\n        return \"alternate\" !== e.direction || e.loop || (e.loop = 1), e;\n    }, P = function(t, e) {\n        var a = [];\n        for(var u in t)if (!n.hasOwnProperty(u) && \"targets\" !== u) {\n            var i = r.object(t[u]) ? m(t[u]) : {\n                value: t[u]\n            };\n            i.name = u, a.push(p(i, e));\n        }\n        return a;\n    }, Q = function(t, n, e, a) {\n        var u = c(r.func(e) ? e(t, a) : e);\n        return {\n            from: u.length > 1 ? u[0] : O(t, n),\n            to: u.length > 1 ? u[1] : u[0]\n        };\n    }, D = function(t, n, e, r) {\n        var a = {};\n        if (\"transform\" === e) a.from = t + \"(\" + b(t, n.from, n.to) + \")\", a.to = t + \"(\" + b(t, n.to) + \")\";\n        else {\n            var u = \"css\" === e ? y(r, t) : void 0;\n            a.from = w(n, n.from, u), a.to = w(n, n.to, u);\n        }\n        return {\n            from: A(a.from),\n            to: A(a.to)\n        };\n    }, j = function(t, n) {\n        var e = [];\n        return t.forEach(function(a, u) {\n            var i = a.target;\n            n.forEach(function(n) {\n                var o = M(i, n.name);\n                if (o) {\n                    var s = Q(i, n.name, n.value, u), c = m(n);\n                    c.animatables = a, c.type = o, c.round = r.color(s.from) ? !0 : c.round, c.delay = (r.func(c.delay) ? c.delay(u, t.length) : c.delay) / c.speed, c.duration = (r.func(c.duration) ? c.duration(u, t.length) : c.duration) / c.speed, c.from = D(n.name, s, c.type, i).from, c.to = D(n.name, s, c.type, i).to, e.push(c);\n                }\n            });\n        }), e;\n    }, q = function(t, n) {\n        var e = j(t, n), r = l(e, [\n            \"name\",\n            \"from\",\n            \"to\",\n            \"delay\",\n            \"duration\"\n        ]);\n        return r.map(function(t) {\n            var n = m(t[0]);\n            return n.animatables = t.map(function(t) {\n                return t.animatables;\n            }), n.totalDuration = n.delay + n.duration, n;\n        });\n    }, B = function(t) {\n        var n = t.to, e = t.from;\n        t.from = n, t.to = e;\n    }, C = function(n, e) {\n        var r = Math.min(Math.max(e - n.delay, 0), n.duration), a = n.to.numbers.map(function(e, a) {\n            var u = n.from.numbers[a], i = e - u, o = t[n.easing](r, u, i, n.duration, n.elasticity);\n            return n.round ? Math.round(o) : o;\n        });\n        return n.currentValues = {\n            progress: a,\n            full: x(a, n.to.strings, n.from.strings)\n        }, n.currentValues.full;\n    }, S = function(t, n) {\n        var e = void 0;\n        if (t.currentTime = Math.min(n, t.totalDuration), t.progress = t.currentTime / t.totalDuration * 100, t.interpolations.forEach(function(r) {\n            var a = C(r, n);\n            t.values[r.name] = {}, r.animatables.forEach(function(n) {\n                var u = n.id;\n                switch(t.values[r.name][u] = r.currentValues, r.type){\n                    case \"css\":\n                        n.target.style[r.name] = a;\n                        break;\n                    case \"attribute\":\n                        n.target.setAttribute(r.name, a);\n                        break;\n                    case \"object\":\n                        n.target[r.name] = a;\n                        break;\n                    case \"transform\":\n                        e || (e = {}), e[u] || (e[u] = []), f(e[u], a) || e[u].push(a);\n                }\n            });\n        }), e) for(var r in e)t.animatables[r].target.style.transform = e[r].join(\" \");\n        t.settings.update && t.settings.update(t);\n    }, $ = function(t) {\n        var n = {};\n        return n.targets = s(r.array(t.targets) ? t.targets.map(c) : c(t.targets)), n.animatables = k(n.targets), n.settings = E(t), n.properties = P(t, n.settings), n.interpolations = q(n.animatables, n.properties), n.totalDuration = Math.max.apply(Math, n.interpolations.map(function(t) {\n            return t.totalDuration;\n        })), n.values = {}, n.currentTime = 0, n.progress = 0, n.running = !1, n.ended = !1, n;\n    }, T = function(t) {\n        if (t && t.targets) {\n            var n = $(t), e = {};\n            return e.tick = function() {\n                n.running && (n.ended = !1, e.now = +new Date(), e.current = e.last + e.now - e.start, S(n, e.current), e.current >= n.totalDuration ? (n.settings.loop ? (e.start = +new Date(), r.number(n.settings.loop) && n.settings.loop--, \"alternate\" === n.settings.direction && n.interpolations.forEach(B), e.raf = requestAnimationFrame(e.tick)) : (n.ended = !0, n.settings.complete ? n.settings.complete(n) : n.pause()), e.last = 0) : e.raf = requestAnimationFrame(e.tick));\n            }, n.set = function(t) {\n                var e = p(t, n.settings);\n                n = p($(e), n);\n            }, n.seek = function(t) {\n                var e = r.number(t) ? t : r.number(t.time) ? t.time : t.percent / 100 * n.totalDuration;\n                S(n, e);\n            }, n.play = function(t) {\n                t && n.set(t), n.running = !0, e.start = +new Date(), e.last = n.ended ? 0 : n.currentTime, \"reverse\" === n.settings.direction && n.interpolations.forEach(B), n.settings.begin && n.settings.begin(n), e.raf = requestAnimationFrame(e.tick);\n            }, n.pause = function(t) {\n                t && n.set(t), n.running = !1, cancelAnimationFrame(e.raf);\n            }, n.restart = function(t) {\n                t && n.set(t), n.running = !1, n.currentTime = 0, n.play();\n            }, n.settings.autoPlay && n.play(), n;\n        }\n    };\n    return T.easings = t, T.is = r, T.getInitialValue = O, T.random = a, T;\n}();\nvar windowOnload = function() {\n    if (!windowOnLoadCalled) {\n        var messagesEl = document.querySelector(\".messages\");\n        var typingSpeed = 30;\n        var loadingText = \"<b>•</b><b>•</b><b>•</b>\";\n        var messageIndex = 0;\n        var messages = [\n            \"Hey there \\uD83D\\uDC4B\",\n            \"I'm Joaquin\",\n            \"A nerd <strong>software engineer</strong> creating<br>and building on the internet.\",\n            'Every day improving and documenting<br>all process on <a target=\"_blank\" href=\"https://www.youtube.com/@joaquinmetayer\">YouTube</a> and <a target=\"_blank\" href=\"https://www.instagram.com/joaquinmetayer\">Instagram</a>',\n            'Reach me on <a target=\"_blank\" href=\"https://www.linkedin.com/in/joaquinmetayer\">LinkedIn</a> or <a target=\"_blank\" href=\"mailto:joaquinmetayer@gmail.com\">email</a>',\n            \"See you solving bugs!\"\n        ];\n        var getFontSize = function() {\n            return parseInt(getComputedStyle(document.body).getPropertyValue(\"font-size\"));\n        };\n        var pxToRem = function(px) {\n            return px / getFontSize() + \"rem\";\n        };\n        var createBubbleElements = function(message, position) {\n            var bubbleEl = document.createElement(\"div\");\n            var messageEl = document.createElement(\"span\");\n            var loadingEl = document.createElement(\"span\");\n            bubbleEl.classList.add(\"bubble\");\n            bubbleEl.classList.add(\"is-loading\");\n            bubbleEl.classList.add(\"cornered\");\n            bubbleEl.classList.add(position === \"right\" ? \"right\" : \"left\");\n            messageEl.classList.add(\"message\");\n            loadingEl.classList.add(\"loading\");\n            messageEl.innerHTML = message;\n            loadingEl.innerHTML = loadingText;\n            bubbleEl.appendChild(loadingEl);\n            bubbleEl.appendChild(messageEl);\n            bubbleEl.style.opacity = 0;\n            return {\n                bubble: bubbleEl,\n                message: messageEl,\n                loading: loadingEl\n            };\n        };\n        var getDimentions = function(elements) {\n            var dimensions = {};\n            return dimensions = {\n                loading: {\n                    w: \"4.5rem\",\n                    h: \"2.25rem\"\n                },\n                bubble: {\n                    w: pxToRem(elements.bubble.offsetWidth + 4),\n                    h: pxToRem(elements.bubble.offsetHeight)\n                },\n                message: {\n                    w: pxToRem(elements.message.offsetWidth + 4),\n                    h: pxToRem(elements.message.offsetHeight)\n                }\n            };\n        };\n        var sendMessage = function(message, position) {\n            var loadingDuration = message.replace(/<(?:.|\\n)*?>/gm, \"\").length * typingSpeed + 500;\n            var elements = createBubbleElements(message, position);\n            messagesEl.appendChild(elements.bubble);\n            messagesEl.appendChild(document.createElement(\"br\"));\n            var dimensions = getDimentions(elements);\n            elements.bubble.style.width = \"0rem\";\n            elements.bubble.style.height = dimensions.loading.h;\n            elements.message.style.width = dimensions.message.w;\n            elements.message.style.height = dimensions.message.h;\n            elements.bubble.style.opacity = 1;\n            var bubbleOffset = elements.bubble.offsetTop + elements.bubble.offsetHeight;\n            if (bubbleOffset > messagesEl.offsetHeight) {\n                var scrollMessages = anime({\n                    targets: messagesEl,\n                    scrollTop: bubbleOffset,\n                    duration: 750\n                });\n            }\n            var bubbleSize = anime({\n                targets: elements.bubble,\n                width: [\n                    \"0rem\",\n                    dimensions.loading.w\n                ],\n                marginTop: [\n                    \"2.5rem\",\n                    0\n                ],\n                marginLeft: [\n                    \"-2.5rem\",\n                    0\n                ],\n                duration: 800,\n                easing: \"easeOutElastic\"\n            });\n            var loadingLoop = anime({\n                targets: elements.bubble,\n                scale: [\n                    1.05,\n                    0.95\n                ],\n                duration: 1100,\n                loop: true,\n                direction: \"alternate\",\n                easing: \"easeInOutQuad\"\n            });\n            var dotsStart = anime({\n                targets: elements.loading,\n                translateX: [\n                    \"-2rem\",\n                    \"0rem\"\n                ],\n                scale: [\n                    0.5,\n                    1\n                ],\n                duration: 400,\n                delay: 25,\n                easing: \"easeOutElastic\"\n            });\n            var dotsPulse = anime({\n                targets: elements.bubble.querySelectorAll(\"b\"),\n                scale: [\n                    1,\n                    1.25\n                ],\n                opacity: [\n                    0.5,\n                    1\n                ],\n                duration: 300,\n                loop: true,\n                direction: \"alternate\",\n                delay: function(i) {\n                    return i * 100 + 50;\n                }\n            });\n            setTimeout(function() {\n                loadingLoop.pause();\n                dotsPulse.restart({\n                    opacity: 0,\n                    scale: 0,\n                    loop: false,\n                    direction: \"forwards\",\n                    update: function(a) {\n                        if (a.progress >= 65 && elements.bubble.classList.contains(\"is-loading\")) {\n                            elements.bubble.classList.remove(\"is-loading\");\n                            anime({\n                                targets: elements.message,\n                                opacity: [\n                                    0,\n                                    1\n                                ],\n                                duration: 300\n                            });\n                        }\n                    }\n                });\n                bubbleSize.restart({\n                    scale: 1,\n                    width: [\n                        dimensions.loading.w,\n                        dimensions.bubble.w\n                    ],\n                    height: [\n                        dimensions.loading.h,\n                        dimensions.bubble.h\n                    ],\n                    marginTop: 0,\n                    marginLeft: 0,\n                    begin: function() {\n                        if (messageIndex < messages.length) elements.bubble.classList.remove(\"cornered\");\n                    }\n                });\n            }, loadingDuration - 50);\n        };\n        var sendMessages = function() {\n            var message = messages[messageIndex];\n            if (!message) return;\n            sendMessage(message);\n            ++messageIndex;\n            setTimeout(sendMessages, message.replace(/<(?:.|\\n)*?>/gm, \"\").length * typingSpeed + anime.random(900, 1200));\n        };\n        sendMessages();\n        windowOnLoadCalled = true;\n    }\n};\nclass HomeChat extends react__WEBPACK_IMPORTED_MODULE_2__.Component {\n    componentDidMount() {\n        let link = document.querySelector(\"link[rel~='icon']\");\n        if (!link) {\n            link = document.createElement(\"link\");\n            link.rel = \"icon\";\n            document.getElementsByTagName(\"head\")[0].appendChild(link);\n        }\n        link.href = \"HomeChat.png\";\n        windowOnload();\n        document.title = \"Joaquin Metayer | Home\";\n    }\n    render() {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"messages\"\n        }, void 0, false, {\n            fileName: \"/Users/joaquinmetayer/Downloads/code/joaquinmetayer.com/src/app/home/page.jsx\",\n            lineNumber: 845,\n            columnNumber: 12\n        }, this);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (HomeChat);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/home/page.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/ODdkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjoaquinmetayer%2FDownloads%2Fcode%2Fjoaquinmetayer.com%2Fsrc%2Fapp%2Fhome%2Fpage.jsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);